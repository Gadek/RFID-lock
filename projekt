// Include required libraries
#include <Crypto.h>
#include <SHA256.h>
#include <string.h>

#include <LiquidCrystal_I2C.h>
#include <Keypad.h>
#include <EEPROM.h>     // We are going to read and write PICC's UIDs from/to EEPROM
#include <SPI.h>        // RC522 Module uses SPI protocol
#include <MFRC522.h>  // Library for Mifare RC522 Devices

#define HASH_SIZE 32

// Create instances
LiquidCrystal_I2C lcd(0x27, 16, 2);
MFRC522 mfrc522(10, 9); // MFRC522 mfrc522(SS_PIN, RST_PIN)

// Initialize Pins for led's and buzzer
// Blue LED is connected to 5V
constexpr uint8_t greenLed = 7;
constexpr uint8_t redLed = 6;
constexpr uint8_t buzzerPin = 5;

byte key_pressed = 0; // Variable to store incoming keys
uint8_t i = 0;  // Variable used for counter
// defining how many rows and columns our keypad have
const byte rows = 4;
const byte columns = 4;
// Keypad pin map
byte hexaKeys[rows][columns] = {
  {0x1, 0x2, 0x3, 0x4},
  {0x5, 0x6, 0x7, 0x8},
  {0x9, 0xA, 0xB, 0xC},
  {0xD, 0xE, 0xF, 0x0}
};
// Initializing pins for keypad
byte row_pins[rows] = {4, 3, 2};
byte column_pins[columns] = {A0, A1, A2, A3};
// Create instance for keypad
Keypad keypad_key = Keypad( makeKeymap(hexaKeys), row_pins, column_pins, rows, columns);

uint8_t successRead;    // Variable integer to keep if we have Successful Read from Reader

bool programMode = false;  // tryb programowania do dodawania i usuwania kart z pamięci
bool addingCardMode = false;  //Tryb ustawiania PINu w trybie programowania
boolean RFIDMode = true; // boolean to change modes

int IDslot; // przechowuje index zeskanowanej karty; przechowuje 255 jeśli zeskanowanej karty nie ma w pamięci

char readPIN[4];   // Variable to store users PIN

uint8_t storedCardHash[HASH_SIZE];   // przechowuje hash UID odczytany z pamięci
uint8_t storedPINHash[HASH_SIZE];// przechowuje hash PINu odczytany z pamięci

uint8_t hashUID[HASH_SIZE]; //bufor na hash UID zeskanowanej karty
uint8_t hashPIN[HASH_SIZE]; //bufor na hash PINu podanego z klawiatury

SHA256 sha256;

void setup() {
  // Arduino Pin configuration
  pinMode(buzzerPin, OUTPUT);
  pinMode(redLed, OUTPUT);
  pinMode(greenLed, OUTPUT);
  lcd.begin();   // LCD screen
  lcd.backlight();
  SPI.begin();      // Init SPI bus
  Serial.begin(9600);
  mfrc522.PCD_Init();   // Init MFRC522

  //TEN KOD DODAJE MASTERCARD 
  if (EEPROM.read(1) == 143) {
    EEPROM.update(0, 0); 
    lcdPrint("Scan to add","Master Card");
    int successRead;
    do {
      successRead = getID();            // sets successRead to 1 when we get read from reader otherwise 0
    }
    while (!successRead);                  // Program will not go further while you not get a successful read
    
    lcdPrint("Set PIN:","");
    do {
      key_pressed = keypad_key.getKey(); // Storing keys
      if (key_pressed)
      {
        readPIN[i++] = key_pressed; // Storing in PIN variable
        lcd.print(key_pressed);
      }
    } while(i<4);
    
    hash(&sha256, readPIN, hashPIN);
    memset(readPIN,0,sizeof(readPIN));

    writeID();
    memset(hashPIN,0,sizeof(hashPIN));
    memset(hashUID,0,sizeof(hashUID));
    
    EEPROM.update(1, 143);
    EEPROM.update(0, 1);   // Write to EEPROM we defined Master Card.
    lcdPrint("Master Card added","successfully");
    delay(1500);
    i=0;
  }  
  lcdPrint("Door locked", "Scan your card");
}

void loop() {
    // System will first look for mode
  if (RFIDMode == true) {
    int successRead;
    //Look for new cards
    do {
      successRead = getID();            // sets successRead to 1 when we get read from reader otherwise 0
    }
    while (!successRead);                  // Program will not go further while you not get a successful read
    IDslot=findID();
    
    if (programMode == false) { 
      // This code will execute at the beginning
      if ( IDslot!=255 ) { // See if the card is in the EEPROM
           // If UID of tag is matched.
           lcdPrint("Tag Matched", "");
          digitalWrite(greenLed, HIGH);
          delay(1000);
          digitalWrite(greenLed, LOW);
          lcdPrint("Enter PIN:", "");
          RFIDMode = false; // Make RFID mode false
        }
        else {      // If not, show that the ID was not valid
           // If UID of tag is not matched.
          lcdPrint("Wrong Tag Shown", "Access Denied");
          accessDenied();
          lcdPrint("Door locked", "Scan your card");
          memset(hashUID,0,sizeof(hashUID));
        }
    }
    else { 
      // Programming Mode
      if ( IDslot==0 ) { //When in program mode check First If master card scanned again to exit program mode
        lcdPrint("Exiting", "programming mode");
        programMode = false;
        digitalWrite(greenLed, HIGH);
        delay(1000);
        digitalWrite(greenLed, LOW);
        lcdPrint("Door locked", "Scan your card");
        memset(hashUID,0,sizeof(hashUID));
      }
      else if ( IDslot == 255 ) { //Nie ma tej karty w pamięci
        lcdPrint("Not in memory", "Adding the tag");
        digitalWrite(greenLed, HIGH);
        delay(1000);
        digitalWrite(greenLed, LOW);
        lcdPrint("Set PIN:", "");
        RFIDMode = false;
        addingCardMode = true;
      }
      else // If scanned card is known delete it
      { 
        deleteID(hashUID);
        lcdPrint("Found in memory:", "Removing the tag...");
        digitalWrite(greenLed, HIGH);
        delay(1000);
        digitalWrite(greenLed, LOW);
        lcdPrint("   Scan a tag", "to add or remove");
        memset(hashUID,0,sizeof(hashUID));        
      }
    }
  }
  // If RFID mode is false, it will look for keys from keypad
  else {
    key_pressed = keypad_key.getKey(); // Storing keys
    if (key_pressed)
    {
      readPIN[i++] = key_pressed; // Storing in PIN variable
      Serial.print(readPIN[i-1], HEX);
      if (addingCardMode) {
        lcd.print(key_pressed);
      } else {
        lcd.print("*");
      }
    }
    if (i == 4) // If 4 keys are completed
    {
      hash(&sha256, readPIN, hashPIN);
      memset(readPIN,0,sizeof(readPIN));
      delay(200);
      bool correctPassord;
      
      if(!addingCardMode) { //Jeśli jest tryb dodawania karty to nie ma potrzeby odczytywac i porownywac piny
         readPINFromEEPROM(IDslot);
         correctPassord = hashCmp(hashPIN, storedPINHash) ;
      }
      
      if (IDslot==0 && correctPassord) // Podawanie hasła do trybu programowania
      {
        lcdPrint("Entering", "Programming Mode");
        digitalWrite(greenLed, HIGH);
        delay(1000);
        digitalWrite(greenLed, LOW);
        lcdPrint("   Scan a tag", "to add or remov");
        programMode = true;  // Go to Programming Mode
      } 
      else if (IDslot!=0 && !addingCardMode && correctPassord) //Podawanie hasła do uwierzytelnienia innej karty niż mastercard
      {
        lcdPrint("Pass Accepted", "");
        digitalWrite(greenLed, HIGH);
        delay(1000);
        digitalWrite(greenLed, LOW);
        lcdPrint("Door locked", "Scan your card");
      } 
      else if (addingCardMode)  //Podawanie hasła do dodawanej właśnie karty
      {   
         writeID();
         lcdPrint(" New tag added", "");
         digitalWrite(greenLed, HIGH);
         delay(1000);
         digitalWrite(greenLed, LOW);
         lcdPrint("Scan a tag", "to add or remove");
         addingCardMode = false;
      }
      else   // If PIN is not matched
      {
        lcdPrint("Wrong PIN", "Access Denied");
        accessDenied();   
        lcdPrint("Door locked", "Scan your card");
      }
      i = 0;  //reset counter for PIN
      RFIDMode = true;  // Make RFID mode true
      memset(hashUID,0,sizeof(hashUID));
      memset(hashPIN,0,sizeof(hashPIN));
     }
  }
}

///////////////////////////////////////// Get PICC's UID ///////////////////////////////////
uint8_t getID() {
  // Getting ready for Reading PICCs
  if ( ! mfrc522.PICC_IsNewCardPresent()) { //If a new PICC placed to RFID reader continue
    return 0;
  }
  if ( ! mfrc522.PICC_ReadCardSerial()) {   //Since a PICC placed get Serial and continue
    return 0;
  }
  byte readCard[4];
  for ( uint8_t i = 0; i < 4; i++) {  //
    readCard[i] = mfrc522.uid.uidByte[i];
  }
  hash(&sha256, readCard, hashUID);
  mfrc522.PICC_HaltA(); // Stop reading
  return 1;
}


//////////////////////////////////////// Read an ID from EEPROM //////////////////////////////
void readIDFromEEPROM( uint8_t number ) {
  uint8_t start = (number * HASH_SIZE*2 ) + 2;    // Figure out starting position
  for ( int i = 0; i < HASH_SIZE; i++ ) {    
    storedCardHash[i] = EEPROM.read(start + i);   // Assign values read from EEPROM to array
  }
}

//////////////////////////////////////// Read an PIN from EEPROM //////////////////////////////
void readPINFromEEPROM( uint8_t number ) {
  uint8_t start = (number * HASH_SIZE*2 ) + 34;    // Figure out starting position
  for ( int i = 0; i < HASH_SIZE; i++ ) {     
    storedPINHash[i] = EEPROM.read(start + i);   // Assign values read from EEPROM to array
  }
}


///////////////////////////////////////// Find ID From EEPROM   ///////////////////////////////////
uint8_t findID() {
  uint8_t count = EEPROM.read(0);     // Read the first Byte of EEPROM that
  for ( uint8_t i = 0; i < count; i++ ) {    // Loop once for each EEPROM entry
    readIDFromEEPROM(i);          
    if ( hashCmp(hashUID, storedCardHash ) ) {  
      return i;
    }
  }
  return 255; //nie znaleziono karty w pamieci
}

///////////////////////////////////////// Check Bytes of UID hashes   ///////////////////////////////////
bool hashCmp (uint8_t *hash1, uint8_t *hash2 ) {   
  return (memcmp(hash1, hash2, HASH_SIZE) == 0);  
}


///////////////////////////////////////// Add ID to EEPROM   ///////////////////////////////////
void writeID(  ) {
  uint8_t num = EEPROM.read(0);     // Get the numer of used spaces, position 0 stores the number of ID cards
  uint8_t start = ( num * HASH_SIZE*2 ) + 2;  // Figure out where the next slot starts
  num++;                // Increment the counter by one
  EEPROM.write( 0, num );     // Write the new count to the counter
//  Serial.println();
//  Serial.println("ZAPISYWANIE");
//  Serial.print("hash UID: ");
//  displayHash(hashUID);
//  Serial.print("hash PIN: ");
//  displayHash(hashPIN);
//  Serial.println();
  for ( uint8_t j = 0; j < HASH_SIZE; j++ ) {   
    EEPROM.write( start + j+HASH_SIZE, hashPIN[j] );  // Write the array values to EEPROM in the right position
    EEPROM.write( start + j, hashUID[j] );  // Write the array values to EEPROM in the right position
  }
  Serial.println(F("Zapisano pomyślnie"));
  print_(8);
}

///////////////////////////////////////// Remove ID from EEPROM   ///////////////////////////////////
void deleteID( byte a[] ) {
  uint8_t num = EEPROM.read(0);                  //position 0 stores the number of ID cards
  uint8_t slot = findID();                       // Figure out the slot number of the card to delete
  uint8_t start= (slot * HASH_SIZE*2) + 2;       // Figure out where the slot starts
  uint8_t looping= (num - slot) * HASH_SIZE*2;              // The number of times the loop repeats
  uint8_t j;
  num--;      // Decrement the counter by one
  EEPROM.write( 0, num );   // Write the new count to the counter
  for ( j = 0; j < looping; j++ ) {         // Loop the card shift times
    EEPROM.write( start + j, EEPROM.read(start + HASH_SIZE*2 + j));   // Shifting loop
  }
  for ( uint8_t k = 0; k < HASH_SIZE*2; k++ ) {         // Erasing loop
    EEPROM.write( start + j + k, 0);
  }
  Serial.println(F("Succesfully removed ID record from EEPROM"));
  print_(8);
}


uint8_t hash(Hash *hash, const char *data, const char *bufor)
{
    hash->reset();
    hash->update(data, 4);
    hash->finalize(bufor, HASH_SIZE);
}

void displayHash(uint8_t *hash) {
  for(int i=0; i<HASH_SIZE; i++) {
      Serial.print(hash[i],HEX);
    }
  Serial.println();
}
void accessDenied(){
  digitalWrite(buzzerPin, HIGH);
  digitalWrite(redLed, HIGH);
  delay(1000);
  digitalWrite(buzzerPin, LOW);
  digitalWrite(redLed, LOW);
}


void print_(int bytes){
  Serial.println();
  Serial.print("Zawartość pierwszych ");
  Serial.print(bytes+2);
  Serial.println(" \"komórek\" EEPROM");
  Serial.println(EEPROM[ 0 ]);
  Serial.println(EEPROM[ 1 ]);
  for(int i=0; i<bytes; i++){
    for (int index = 0 ; index < HASH_SIZE ; index++) {
      Serial.print(EEPROM[ (index+i*HASH_SIZE)+2 ], HEX);
    }
    Serial.println();
  }
}
void lcdPrint(const char up[16], const char down[16]) {
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print(up);
  lcd.setCursor(0, 1);
  lcd.print(down);
}
